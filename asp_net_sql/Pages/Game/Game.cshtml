@page

@using asp_net_sql.Pages.CodeBehind
@using asp_net_sql.Common;

@model Game_CB

<script type="module">
    const get = id => document.getElementById(id);

    for (let i = 0; i < 9; i++) {
        const cell = get('cell_' + i);
        cell.addEventListener('click', () => {
            console.log(`cell_${i} clicked`);
        });
    }
</script>

<div class="main_container">
    <div class="header">1</div>
    <div class="left">
        @await Html.PartialAsync("_InfoPartial")
        <div id="LeftLog"></div>
    </div>
    <div class="middle">
        <div class="aspect game_container">
            <div class="cell center" id="cell_0">1</div>
            <div class="cell center" id="cell_1">2</div>
            <div class="cell center" id="cell_2">3</div>
            <div class="cell center" id="cell_3">4</div>
            <div class="cell center" id="cell_4">5</div>
            <div class="cell center" id="cell_5">6</div>
            <div class="cell center" id="cell_6">7</div>
            <div class="cell center" id="cell_7">8</div>
            <div class="cell center" id="cell_8">9</div>

            <div class="info center" id="info">info</div>

            <div class="vs center" id="vs">
                <button id="post">send post</button>
                <button id="wsopen">ws open</button>
                <button id="wssend">ws send</button>
                <button id="wsclose">ws close</button>
            </div>
        </div>
    </div>
    <div class="right">
        <div id="RightLog"></div>
    </div>
    <div class="footer">5</div>
</div>

<script type="module">

    // promise wrapper for XMLHttpRequest
    import { makeRequest, webSocket } from '/js/network.js'

    const log = console.log;
    const err = console.error;
    const get = id => document.getElementById(id);

    const getHTML = () => {
        const html = {};
        document.querySelectorAll('*[id]').forEach(e => html[e.id] = e);
        return html;
    };

    const url = '@ViewData["baseURI"]';

    const enmPackStat = {
        @Html.Raw(PackStat.None.TypeToString())
    };

    const enmPackCmd = {
        @Html.Raw(PackCmd.None.TypeToString())
    };

    const enmResType = {
        @Html.Raw(ResType.None.TypeToString())
    };

    const getEnumNameByVal =
        (enm, v) => Object.keys(enm).find(k => enm[k] == v);

    const Packet = (keyValuePairs, status, message, command) => ({
        keyValuePairs,
        message,
        status,
        command
    });

    const JsonToPacket = json => { 
        const packet = JSON.parse(json);
        packet.commandEnum = getEnumNameByVal(enmPackCmd, packet.command);
        packet.statusEnum = getEnumNameByVal(enmPackStat, packet.status);
        packet.typeEnum = getEnumNameByVal(enmResType, packet.type);
        return packet;
    };

    const postToAPI = (data, endpoint = '/API/Index') => {

        const jsonData = JSON.stringify(data);

        log(`Sent json: ${jsonData}`);

        makeRequest(url + endpoint, '', 'POST', 0, null, jsonData)
            .then(res => { 
                log(`Received:\nind: ${res.ind}\ndata: ${res.data}`);
                const packet = JsonToPacket(res.data);
                log(packet);
            })
            .catch(e => { err('Received error: ' + e) });
    };

    function WSRunner() 
    { 
        this.open = obj => {

            if (this.socket) {
                log("socket already exists");
                return;
            }

            this.socket = webSocket(
                obj.scheme,
                obj.host,
                obj.port,
                obj.path,
                obj.onOpen = null,
                obj.onMessage = null,
                obj.onError = null,
                obj.onClose = null,
            );
        };

        this.send = data => { 

            const jsonData = JSON.stringify(data);

            log(`Sent json: ${jsonData}`);

            this.socket.send(jsonData);
        };

        this.close = () => { 
            this.socket.close(); // CHECK PARAMS
            this.socket = null;
        };

    }

    const html = getHTML();

    const wsBtn = [html.wsopen, html.wssend, html.wsclose];

    // test packet

    const packet = Packet(
        {
            key1: 'value1',
            key2: 'value2'
        },
        enmPackStat.None,
        'test message',
        enmPackCmd.Test
    );

    log('packet created:');
    log(packet);

    // websocket wrapper

    const wsRunner = new WSRunner();

    const onWsMessage = evt => {
        const packet = JsonToPacket(evt.data); // , PRINT SOCK NAME
        log(packet);
    };

    html.wsopen.addEventListener('click', () => { 
        wsRunner.open({
            scheme: 'wss',
            host: 'localhost',
            port: '7170',
            path: 'ws',
            onMessage: onWsMessage,
        });
    });

    html.wssend.addEventListener('click', () => {
        wsRunner.send(packet)
    });

    html.wsclose.addEventListener('click', () => {
        wsRunner.close()
    });

    // post

    html.post.addEventListener('click', () => { 
        postToAPI(packet)
    });

    // init

    const loadAssets = async () => {
        await new Promise((res, rej) => { setTimeout(res, 2000) });
    };

    window.addEventListener('load', async () => { 
        
        wsBtn.forEach(btn => btn.disabled = true);
        
        await loadAssets();

        wsBtn.forEach(btn => btn.disabled = false);
    });

</script>
